"""
This code is generated using MoTxT,
checkout more about us on https://motxt.ppl.cs.ui.ac.id
"""

from django.shortcuts import render, redirect
from django.http import JsonResponse
from .forms import *
from .models import *
from django.apps import apps

#-----method from class getId------

def getId(request, instance_name) -> str:
    # TODO: Auto generated function stub
    """
    This method is empty due to not having any implementation in the sequence diagram submited.
    You can resubmit the files again with the function implemented
    in the sequence diagram or implement it yourself
    """
    raise NotImplementedError('getId function is not yet implemented')
    pass



#-----method from class setRadius------

def setRadius(request, instance_name, radius):
    # TODO: Auto generated function stub
    """
    This method is empty due to not having any implementation in the sequence diagram submited.
    You can resubmit the files again with the function implemented
    in the sequence diagram or implement it yourself
    """
    raise NotImplementedError('setRadius function is not yet implemented')
    pass



#-----method from class findCircle------

def findCircle(request, instance_name, circleId):
    # TODO: Auto generated function stub
    """
    This method is empty due to not having any implementation in the sequence diagram submited.
    You can resubmit the files again with the function implemented
    in the sequence diagram or implement it yourself
    """
    raise NotImplementedError('findCircle function is not yet implemented')
    pass



def editRadius(request, circleId, radius):
    circle = findCircle(request, circleId)
    setRadius(request, radius)
    pass

def landing_page(request):

    model_info = {}
    model_info["shape"] = "Shape"
    model_info["circle"] = "Circle"
    model_info["circles"] = "Circles"
    

    return render(request, 'landing_page.html', {'model_info': model_info})

def create_shape(request):
    if request.method == 'POST':
        form = ShapeForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('main:get_shape')
    else:
        form = ShapeForm()
    return render(request, 'create_shape.html', {'form': form})


def create_circle(request):
    if request.method == 'POST':
        form = CircleForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('main:get_circle')
    else:
        form = CircleForm()
    return render(request, 'create_circle.html', {'form': form})


def create_circles(request):
    if request.method == 'POST':
        form = CirclesForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('main:get_circles')
    else:
        form = CirclesForm()
    return render(request, 'create_circles.html', {'form': form})


def get_shape(request):
    shapes = Shape.objects.all()
    all_fields = [field.name for field in Shape._meta.get_fields()]
    shape_data = []
    
    for shape in shapes:
        shape_dict = {}
        for field_name in all_fields:
            try:
                field = Shape._meta.get_field(field_name)
                if field.is_relation and field.many_to_many:
                    related_objects = getattr(shape, field_name).all()
                    shape_dict[field_name] = ", ".join([str(obj) for obj in related_objects]) or "None"
                else:
                    shape_dict[field_name] = getattr(shape, field_name)
            except:
                shape_dict[field_name] = "N/A"
        shape_data.append((shape, shape_dict))
    
    return render(request, 'shape_list.html', {
        'shape_data': shape_data,
        'fields': all_fields,
    })



def get_circle(request):
    circles = Circle.objects.all()
    all_fields = [field.name for field in Circle._meta.get_fields()]
    circle_data = []
    
    for circle in circles:
        circle_dict = {}
        for field_name in all_fields:
            try:
                field = Circle._meta.get_field(field_name)
                if field.is_relation and field.many_to_many:
                    related_objects = getattr(circle, field_name).all()
                    circle_dict[field_name] = ", ".join([str(obj) for obj in related_objects]) or "None"
                else:
                    circle_dict[field_name] = getattr(circle, field_name)
            except:
                circle_dict[field_name] = "N/A"
        circle_data.append((circle, circle_dict))
    
    return render(request, 'circle_list.html', {
        'circle_data': circle_data,
        'fields': all_fields,
    })



def get_circles(request):
    circless = Circles.objects.all()
    all_fields = [field.name for field in Circles._meta.get_fields()]
    circles_data = []
    
    for circles in circless:
        circles_dict = {}
        for field_name in all_fields:
            try:
                field = Circles._meta.get_field(field_name)
                if field.is_relation and field.many_to_many:
                    related_objects = getattr(circles, field_name).all()
                    circles_dict[field_name] = ", ".join([str(obj) for obj in related_objects]) or "None"
                else:
                    circles_dict[field_name] = getattr(circles, field_name)
            except:
                circles_dict[field_name] = "N/A"
        circles_data.append((circles, circles_dict))
    
    return render(request, 'circles_list.html', {
        'circles_data': circles_data,
        'fields': all_fields,
    })



def delete_shape(request):
    if request.method == 'POST':
        object_id = request.POST.get('object_id')

        if object_id is None:
            return JsonResponse({"error": "ID is required"}, status=400)

        obj = Shape.objects.get(pk=object_id)
        obj.delete()
        return redirect('main:get_shape')
    return JsonResponse({"error": "Invalid request method"}, status=405)

def delete_circle(request):
    if request.method == 'POST':
        object_id = request.POST.get('object_id')

        if object_id is None:
            return JsonResponse({"error": "ID is required"}, status=400)

        obj = Circle.objects.get(pk=object_id)
        obj.delete()
        return redirect('main:get_circle')
    return JsonResponse({"error": "Invalid request method"}, status=405)

def delete_circles(request):
    if request.method == 'POST':
        object_id = request.POST.get('object_id')

        if object_id is None:
            return JsonResponse({"error": "ID is required"}, status=400)

        obj = Circles.objects.get(pk=object_id)
        obj.delete()
        return redirect('main:get_circles')
    return JsonResponse({"error": "Invalid request method"}, status=405)

def edit_shape(request, id):
    shape_obj = Shape.objects.get(pk=id)
    form = ShapeForm(request.POST or None, instance=shape_obj)
    if form.is_valid() and request.method == 'POST':
        form.save()
        return redirect('main:get_shape')

    return render(request, 'edit_shape.html', {'form': form})


def edit_circle(request, id):
    circle_obj = Circle.objects.get(pk=id)
    form = CircleForm(request.POST or None, instance=circle_obj)
    if form.is_valid() and request.method == 'POST':
        form.save()
        return redirect('main:get_circle')

    return render(request, 'edit_circle.html', {'form': form})
